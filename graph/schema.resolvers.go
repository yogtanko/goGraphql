package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.72

import (
	"context"

	"github.com/yogtanko/goGraphql/graph/model"
)

// AddVariable is the resolver for the addVariable field.
func (r *mutationResolver) AddVariable(ctx context.Context, input model.AddVariable) (*model.Variable, error) {
	return r.VariableController.AddVariable(&input)
}

// UpdateVariable is the resolver for the updateVariable field.
func (r *mutationResolver) UpdateVariable(ctx context.Context, input model.AddVariable) (*model.Variable, error) {
	return r.VariableController.UpdateVariable(&input)
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.NewUser) (*model.User, error) {
	return r.UserController.CreateUser(&input)
}

// Variables is the resolver for the Variables field.
func (r *queryResolver) Variables(ctx context.Context) ([]*model.Variable, error) {
	return r.VariableController.GetAllVariable()
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	return r.UserController.GetAllUser()
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
